// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Troop {
  id               String             @id @default(cuid())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  events           Event[]
  announcements    Announcement[]
  User             User[]
  WhitelistedEmail WhitelistedEmail[]
}

model Event {
  id        String    @id @default(cuid())
  name      String
  content   String    @db.Text
  startdate DateTime
  enddate   DateTime?
  troopId   String
  troop     Troop     @relation(fields: [troopId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Announcement {
  id        String   @id @default(cuid())
  name      String
  content   String   @db.Text
  troopId   String
  troop     Troop    @relation(fields: [troopId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phoneNumber   String?
  addressId     String?   @map("address_id")
  address       Address?  @relation(fields: [addressId], references: [id])
  parishId      String?   @map("parish_id")
  parish        Parish?   @relation(fields: [parishId], references: [id])
  emailVerified DateTime?
  image         String?
  troop         Troop     @relation(fields: [troopId], references: [id])
  troopId       String
  accounts      Account[]
  sessions      Session[]
  fatherId      String?   @map("father_id")
  father        User?     @relation("FatherSon", fields: [fatherId], references: [id])
  sons          User[]    @relation("FatherSon")
}

model Address {
  id      String @id @default(cuid())
  street  String
  city    String
  state   String
  zip     String
  country String
  User    User[]
}

model Parish {
  id           String @id @default(cuid())
  name         String
  parishioners User[]
}

model WhitelistedEmail {
  id      String @id @default(cuid())
  email   String @unique
  troopId String
  troop   Troop  @relation(fields: [troopId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
